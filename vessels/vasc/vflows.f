	SUBROUTINE VFLOWS(COUNT,IFL)
C
C COMPUTES THE FLOWS AND CONCENTRATIONS FOR ALL VASCULAR SEGMENTS GIVEN
C  INITIAL FLOWS AND PRESSURES AND GIVEN INTERSTITIAL CONDITIONS
C
	INTEGER SOLS,T,X,CHOP,COUNT,IFL
C       COUNT-  NUMBER OF EXPT. BEING SIMULATED
C       IFL-  EQUALS 0 IF BOUNDARY VALUES ARE TO BE READ; EQUALS 2 IF NOT
C
C PARAMETERS
	DOUBLE PRECISION
     1   Z(15),ZIMPC,RT,RTE,F,
     1   EPSI,SCALE,DT,RTAU,TIME,DIST,
     1   PKC,PKP,PKN,PKF,KHY,KDHY,
     1   LPCS,SCS(15),LCS(15),HCS(15),
     1   LPCSE,SCSE(15),LCSE(15),HCSE(15),
     1   LPCSI,SCSI(15),LCSI(15),HCSI(15),
     1   CL,DX,RC0,MUC,ETA,
     1   KXO,KXD,KYO,KYD,
     1   KCO,KCD,KZO,KZD,
     1   A0,A1,A2,P50,HILL,BOHR
C 
C VARIABLES
	DOUBLE PRECISION
     1   VC(901,2),PC(901,2),CC(31,901,2),IMPC(901,2),
     1   LCHC(901),XC(15,901),
     1   VS(901,2),PS(901,2),CS(16,901,2),
     1   IMPS(901,2),LCHS(901),XS(15,901),
     1   CCS(15),SAT(901,2),CCN(901,2),CCX(901,2),CCY(901,2),
     1   SC(901,2),AC(901,2),FVC(901,2),FKC(31,901,2),
     1   QV,QC(31),FVCS(901,2),FKCS(16,901,2),
     1   FVCSE(901,2),FKCSE(16,901,2),FVCSI(901,2),FKCSI(16,901,2),
     1   HCTC(901,2),FBC(901,2),POX(901,2)
C
C KEY TO INDICES:
C  8 vessels: OM (IVR = 1,2) plus 5 IM (IVR = 3-7), plus 1 MR (IVR = 8)
C
C Segment numbers (ISEG)
C      1- OMDVR, MRDVR, OIDVR
C      2- IMDVR
C      3- IMAVR
C      4- OMAVR, MRAVR, OIAVR
C
	INTEGER IARCH,IVR,ISEG
C  IARCH = 0 (ARCHIVE) 
C        = 1 (RETRIEVE EVERYTHING) 
C        = 2 (INITIALIZE THE NEXT SEGMENT)
C        = 3 (RETRIEVE EVERYTHING EXCEPT X=1 LUMEN VARIABLES)
C
        DOUBLE PRECISION RADVR(8),RDNUM(8),RANUM(8),FSCAL
C  RADVR- RATIO OF AVR NUMBER TO DVR NUMBER FOR EACH VESSEL
C  FSCAL- SCALAR EQUAL TO RADVR FOR THAT VESSEL:
C    IN "ARCHIVE" THE ASCENDING FLOWS CORRESPOND TO THE SUM OF AVR FLOWS
C    WHICH CORRESPOND TO THE SINGLE DVR THAT GAVE BIRTH TO THEM
C
	INTEGER 
     1   RVX(8,4), RVCHOP(8,4)
C PARAMETERS
	DOUBLE PRECISION
     1   RVEPSI(8,4),RVDIST(8,4),RVKHY(8,4),RVKDHY(8,4),
     1   RVDX(8,4),RVETA(8,4),RCL(8,4),RRC0(8,4),RMUC(8,4),
     1   RLPCS(8,4),RSCS(8,4,15),RLCS(8,4,15),RHCS(8,4,15),
     1   RLPCSE(8,4),RSCSE(8,4,15),RLCSE(8,4,15),RHCSE(8,4,15),
     1   RLPCSI(8,4),RSCSI(8,4,15),RLCSI(8,4,15),RHCSI(8,4,15)
C VARIABLES
	DOUBLE PRECISION
     1   RVVS(8,4,901,2),RVPS(8,4,901,2),RVCS(8,4,16,901,2),
     1   RVIMPS(8,4,901,2),RVLCHS(8,4,901),RVXS(8,4,15,901),
     1   RVC(8,4,901,2),RPC(8,4,901,2),RCC(8,4,31,901,2),
     1   RIMPC(8,4,901,2),RLCHC(8,4,901),RXC(8,4,15,901),
     1   RSAT(8,4,901,2),RCCN(8,4,901,2),
     1   RCCX(8,4,901,2),RCCY(8,4,901,2),RPOX(8,4,901,2),
     1   RSC(8,4,901,2),RAC(8,4,901,2),RFVC(8,4,901,2),
     1   RFKC(8,4,31,901,2),RFVCS(8,4,901,2),RFKCS(8,4,16,901,2),
     1   RFVCSE(8,4,901,2),RFKCSE(8,4,16,901,2),RFVCSI(8,4,901,2),
     1   RFKCSI(8,4,16,901,2),RHCTC(8,4,901,2),RFBC(8,4,901,2)
C
	COMMON/PAR/ SOLS,T,X,CHOP,
     1   Z,ZIMPC,RT,RTE,F,
     1   EPSI,SCALE,DT,RTAU,TIME,DIST,
     1   PKC,PKP,PKN,PKF,KHY,KDHY,
     1   LPCS,SCS,LCS,HCS,
     1   LPCSE,SCSE,LCSE,HCSE,
     1   LPCSI,SCSI,LCSI,HCSI,
     1   CL,DX,RC0,MUC,ETA,
     1   KXO,KXD,KYO,KYD,
     1   KCO,KCD,KZO,KZD,
     1   A0,A1,A2,P50,HILL,BOHR
	COMMON/VAR/
     1   VC,PC,CC,VS,PS,CS,IMPC,IMPS,
     1   LCHC,LCHS,XC,XS,CCS,
     1   SAT,CCN,CCX,CCY,HCTC,FBC,POX,
     1   SC,AC,FVC,FKC,QC,QV,FVCS,FKCS,
     1   FVCSE,FKCSE,FVCSI,FKCSI
C
	COMMON /ARCHVR/
     1   RVX,RVCHOP,RADVR,RDNUM,RANUM,
     1   RVEPSI,RVDIST,RVKHY,RVKDHY,
     1   RVDX,RVETA,RCL,RRC0,RMUC,
     1   RLPCS,RSCS,RLCS,RHCS,
     1   RLPCSE,RSCSE,RLCSE,RHCSE,
     1   RLPCSI,RSCSI,RLCSI,RHCSI,
     1   RVVS,RVPS,RVCS,RVIMPS,RVLCHS,RVXS,
     1   RVC,RPC,RCC,RIMPC,RLCHC,RXC,
     1   RSAT,RCCN,RCCX,RCCY,RSC,RAC,
     1   RFVC,RFKC,RFVCS,RFKCS,
     1   RFVCSE,RFKCSE,RFVCSI,
     1   RFKCSI,RHCTC,RFBC,RPOX
C	
	SOLS=15
C
C USE IVR TO CALCULATE CHOP AND CL (NO CHANGE IN DX):
C   IVR = 1,2 FOR OM          IVR = 3,7 FOR IM           IVR = 8 FOR MR
C
C OM VESSEL: IVR = 1 or 2, turning at 1 mm (OS-IS) or 2 mm (OIMJ)
C
        IVR=1
	CALL OMDNEWT(COUNT,IVR,IFL)
	CALL ARCHIVR(0,IVR,1)
	CALL ARCHIVR(2,IVR,1)
C
C SET THE AVR INTERSTITIAL CONDITIONS BASED ON THE DVR CONDITIONS
C  BOUNDARY VALUES ARE NOT READ FROM THE AVR PROGRAMS
C
        IF (IFL.EQ.0) THEN
        DO 15 IX=1,CHOP+1
	VS(IX,T) = RVVS(IVR,1,CHOP+2-IX,T)
	PS(IX,T) = RVPS(IVR,1,CHOP+2-IX,T)
	IMPS(IX,T) = RVIMPS(IVR,1,CHOP+2-IX,T)
	LCHS(IX) = RVLCHS(IVR,1,CHOP+2-IX)
        POX(IX,T) = RPOX(IVR,1,CHOP+2-IX,T)
        SAT(IX,T) = RSAT(IVR,1,CHOP+2-IX,T)
	DO 14 ISOL = 1,SOLS
   14   CS(ISOL,IX,T) = RVCS(IVR,1,ISOL,CHOP+2-IX,T)
   15   CONTINUE
        ELSE IF (IFL.EQ.2) THEN
        CALL ARCHIVR(3,IVR,4)
        ENDIF
C
	CALL OMANEWT(COUNT,IVR,IFL)
	CALL ARCHIVR(0,IVR,4)
C
C NOTE CALL TO NEWT SHOULD NOT ADVANCE PARAMS OR BOUND.DAT
C
        IVR=2
	CALL ARCHIVR(1,1,1)
        CHOP=2*CHOP
        CL=2.*CL
	CALL OMDNEWT(COUNT,IVR,2)
	CALL ARCHIVR(0,IVR,1)
	CALL ARCHIVR(2,IVR,1)
C
C SET THE AVR INTERSTITIAL CONDITIONS BASED ON THE DVR CONDITIONS
C  BOUNDARY VALUES ARE NOT READ FROM THE AVR PROGRAMS
C
        IF (IFL.EQ.0) THEN
        CALL ARCHIVR(3,1,4)
        CHOP=RVCHOP(IVR,1)
        CL=RCL(IVR,1)
        DO 35 IX=1,CHOP+1
	VS(IX,T) = RVVS(IVR,1,CHOP+2-IX,T)
	PS(IX,T) = RVPS(IVR,1,CHOP+2-IX,T)
	IMPS(IX,T) = RVIMPS(IVR,1,CHOP+2-IX,T)
	LCHS(IX) = RVLCHS(IVR,1,CHOP+2-IX)
        POX(IX,T) = RPOX(IVR,1,CHOP+2-IX,T)
        SAT(IX,T) = RSAT(IVR,1,CHOP+2-IX,T)
	DO 34 ISOL = 1,SOLS
   34   CS(ISOL,IX,T) = RVCS(IVR,1,ISOL,CHOP+2-IX,T)
   35   CONTINUE
        ELSE IF (IFL.EQ.2) THEN
        CALL ARCHIVR(3,IVR,4)
        ENDIF
C
	CALL OMANEWT(COUNT,IVR,2)
	CALL ARCHIVR(0,IVR,4)
C
C IM VESSEL: IVR = 3-7, turning at 1-5 mm into the IM
C
	IVR=3
	CALL OIDNEWT(COUNT,IVR,IFL)
	CALL ARCHIVR(0,IVR,1)
	CALL ARCHIVR(2,IVR,1)
C
	CALL IMDNEWT(COUNT,IVR,IFL)
	CALL ARCHIVR(0,IVR,2)
	CALL ARCHIVR(2,IVR,2)
C
C SET THE AVR INTERSTITIAL CONDITIONS BASED ON THE DVR CONDITIONS
C  BOUNDARY VALUES ARE NOT READ FROM THE AVR PROGRAMS
C
        IF (IFL.EQ.0) THEN
        DO 25 IX=1,CHOP+1
	VS(IX,T) = RVVS(IVR,2,CHOP+2-IX,T)
	PS(IX,T) = RVPS(IVR,2,CHOP+2-IX,T)
	IMPS(IX,T) = RVIMPS(IVR,2,CHOP+2-IX,T)
	LCHS(IX) = RVLCHS(IVR,2,CHOP+2-IX)
        POX(IX,T) = RPOX(IVR,2,CHOP+2-IX,T)
        SAT(IX,T) = RSAT(IVR,2,CHOP+2-IX,T)
	DO 24 ISOL = 1,SOLS
   24   CS(ISOL,IX,T) = RVCS(IVR,2,ISOL,CHOP+2-IX,T)
   25   CONTINUE
        ELSE IF (IFL.EQ.2) THEN
        CALL ARCHIVR(3,IVR,3)
        ENDIF
C
	CALL IMANEWT(COUNT,IVR,IFL)
	CALL ARCHIVR(0,IVR,3)
	CALL ARCHIVR(2,IVR,3)
C
        IF (IFL.EQ.0) THEN
        CHOP=RVCHOP(IVR,2)
        DO 55 IX=1,CHOP+1
	VS(IX,T) = RVVS(IVR,1,CHOP+2-IX,T)
	PS(IX,T) = RVPS(IVR,1,CHOP+2-IX,T)
	IMPS(IX,T) = RVIMPS(IVR,1,CHOP+2-IX,T)
	LCHS(IX) = RVLCHS(IVR,1,CHOP+2-IX)
        POX(IX,T) = RPOX(IVR,1,CHOP+2-IX,T)
        SAT(IX,T) = RSAT(IVR,1,CHOP+2-IX,T)
	DO 54 ISOL = 1,SOLS
   54   CS(ISOL,IX,T) = RVCS(IVR,1,ISOL,CHOP+2-IX,T)
   55   CONTINUE
        ELSE IF (IFL.EQ.2) THEN
        CALL ARCHIVR(3,IVR,4)
        ENDIF
C
	CALL OIANEWT(COUNT,IVR,IFL)
	CALL ARCHIVR(0,IVR,4)
	CALL ARCHIVR(2,IVR,4)
C
C NOTE CALL TO NEWT SHOULD NOT ADVANCE PARAMS OR BOUND.DAT
C
	DO 290 IVR=4,7
	CALL ARCHIVR(1,3,1)
	CALL OIDNEWT(COUNT,IVR,2)
	CALL ARCHIVR(0,IVR,1)
	CALL ARCHIVR(2,IVR,1)
C
	CALL ARCHIVR(3,3,2)
	CHOP = (IVR-2)*CHOP
	CL = FLOAT(IVR-2)*CL
	CALL IMDNEWT(COUNT,IVR,2)
	CALL ARCHIVR(0,IVR,2)
	CALL ARCHIVR(2,IVR,2)
C
C SET THE AVR INTERSTITIAL CONDITIONS BASED ON THE DVR CONDITIONS
C  BOUNDARY VALUES ARE NOT READ FROM THE AVR PROGRAMS
C
        IF (IFL.EQ.0) THEN
        CALL ARCHIVR(3,3,3)
        CHOP=RVCHOP(IVR,2)
        CL=RCL(IVR,2)
        DO 65 IX=1,CHOP+1
	VS(IX,T) = RVVS(IVR,2,CHOP+2-IX,T)
	PS(IX,T) = RVPS(IVR,2,CHOP+2-IX,T)
	IMPS(IX,T) = RVIMPS(IVR,2,CHOP+2-IX,T)
	LCHS(IX) = RVLCHS(IVR,2,CHOP+2-IX)
        POX(IX,T) = RPOX(IVR,2,CHOP+2-IX,T)
        SAT(IX,T) = RSAT(IVR,2,CHOP+2-IX,T)
	DO 64 ISOL = 1,SOLS
   64   CS(ISOL,IX,T) = RVCS(IVR,2,ISOL,CHOP+2-IX,T)
   65   CONTINUE
        ELSE IF (IFL.EQ.2) THEN
        CALL ARCHIVR(3,IVR,3)
        ENDIF
C
	CALL IMANEWT(COUNT,IVR,2)
	CALL ARCHIVR(0,IVR,3)
	CALL ARCHIVR(2,IVR,3)
C
        IF (IFL.EQ.0) THEN
	CALL ARCHIVR(3,3,4)
        DO 75 IX=1,CHOP+1
	VS(IX,T) = RVVS(IVR,1,CHOP+2-IX,T)
	PS(IX,T) = RVPS(IVR,1,CHOP+2-IX,T)
	IMPS(IX,T) = RVIMPS(IVR,1,CHOP+2-IX,T)
	LCHS(IX) = RVLCHS(IVR,1,CHOP+2-IX)
        POX(IX,T) = RPOX(IVR,1,CHOP+2-IX,T)
        SAT(IX,T) = RSAT(IVR,1,CHOP+2-IX,T)
	DO 74 ISOL = 1,SOLS
   74   CS(ISOL,IX,T) = RVCS(IVR,1,ISOL,CHOP+2-IX,T)
   75   CONTINUE
        ELSE IF (IFL.EQ.2) THEN
        CALL ARCHIVR(3,IVR,4)
        ENDIF
C
	CALL OIANEWT(COUNT,IVR,2)
	CALL ARCHIVR(0,IVR,4)
C
  290   CONTINUE
C
C MEDULLARY RAY VESSEL;
C
	IVR=8
	CALL MRDNEWT(COUNT,IVR,IFL)
	CALL ARCHIVR(0,IVR,1)
	CALL ARCHIVR(2,IVR,1)
C
        IF (IFL.EQ.0) THEN
        DO 85 IX=1,CHOP+1
	VS(IX,T) = RVVS(IVR,7,CHOP+2-IX,T)
	PS(IX,T) = RVPS(IVR,7,CHOP+2-IX,T)
	IMPS(IX,T) = RVIMPS(IVR,7,CHOP+2-IX,T)
	LCHS(IX) = RVLCHS(IVR,7,CHOP+2-IX)
        POX(IX,T) = RPOX(IVR,7,CHOP+2-IX,T)
        SAT(IX,T) = RSAT(IVR,7,CHOP+2-IX,T)
	DO 84 ISOL = 1,SOLS
   84   CS(ISOL,IX,T) = RVCS(IVR,7,ISOL,CHOP+2-IX,T)
   85   CONTINUE
        ELSE IF (IFL.EQ.2) THEN
        CALL ARCHIVR(3,IVR,8)
        ENDIF
C
	CALL MRANEWT(COUNT,IVR,IFL)
	CALL ARCHIVR(0,IVR,4)
C
  390   CONTINUE
C
	RETURN
	END
C
