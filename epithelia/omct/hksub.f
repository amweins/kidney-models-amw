	SUBROUTINE HK(VV,SS)
C
C THE PROGRAM SOLVES FOR THE STEADY-STATE H-K-ATPase
C CALL IS OF THE FORM:
C	CALL HK(V,ICF(K+),ICF(H+),ECF(K+),ECF(H+))
C
	DOUBLE PRECISION VV,SS(4)
C
C       S-	SUBSTRATE CONCENTRATIONS (MMOL/ML)
C		S1-	K(1)
C		S2-	H(1)
C		S3-	K(2)
C		S4-	H(2)
C       V-	NET FORWARD REACTION VELOCITY
C
	INTEGER SOLS
C
	DOUBLE PRECISION
     1   V,C,S,KF,KB
C
C       SOLS-   NUMBER OF SOLUTES
C       S-      SUBSTRATE CONCENTRATION (MMOL/ML)
C	KF-	FORWARD RATE CONSTANT
C	KB-	BACKWARD RATE CONSTANT
C       C-	UNKNOWN CONCENTRATION (MMOL/ML)
C       V-	NET FORWARD REACTION VELOCITY
C
	DIMENSION
     1   S(7),KF(15),KB(15),V(15),C(14)
C
C
	DOUBLE PRECISION PHI,MAXPHI,EPSI,DELC,NDERIV
C
C       PHI-    ERROR VECTOR- TO BE ZEROED VIA NEWTON ITERATION
C       NDERIV- NUMERICAL DERIVATIVE OF PHI WITH RESPECT TO C
C       MAXPHI- MAXIMUM COMPONENT OF THE PHI VECTOR
C       EPSI-   TOLERANCE FOR THE ERROR VECTOR
C	DELC-	CORRECTIONS TO THE C VECTOR COMPUTED BY LES
C
	DIMENSION PHI(14),NDERIV(14,14),DELC(14)
C
C
	REAL*8 SW,PTOL
	INTEGER PR,PFL
C
C	SW-	ERROR SWITCH FOR LES
C	PTOL-	PIVOT TOLERANCE
C	PR-	NUMBER OF THE PIVOT ROW FOR EACH COLUMN
C	PFL-	PIVOT FLAG SHOWING ROWS FOR WHICH PIVOTS HAVE BEEN CHOSEN
C
	DIMENSION PR(14),PFL(14)
C
C
	DATA C/
     1    .8292D-04, .3308D+00, .2688D+00, .2185D+00,
     1    .6970D-01, .2191D-01, .7826D-02, .2645D-07,
     1    .3194D-04, .5053D-01, .1714D-01, .5812D-02,
     1    .5032D-02, .3922D-02/
	DATA KF/
     1    .1300D+08,  .8900D+04,  .8900D+04,  .5300D+10,  
     1    .5300D+10,  .5000D+02,  .4000D+02,  .5000D+08,  
     1    .5000D+08,  .2600D+11,  .2600D+11,  .5400D+02,  
     1    .1750D+01,  .5000D+05,  .5000D+03/  
	DATA KB/
     1    .6500D+01,  .7300D+05,  .7300D+05,  .6600D+03,
     1    .6600D+03,  .2500D+07,  .2000D+03,  .8000D+13,
     1    .8000D+13,  .1500D+09,  .1500D+09,  .3200D+02,
     1    .3500D+02,  .5000D+02,  .5000D+01/
	DATA (S(I),I=1,3)/
     1   .2000D-02, .4000D-04, .5000D-02/
C
C
C EXPERIMENTS WILL CYCLE FROM THIS POINT.
C
C  SOLUTE INDEX:
C
C	C1-	K2E1
C	C2-	K2E1-ATP
C	C3-	KE1-ATP
C	C4-	E1-ATP
C	C5-	HE1-ATP
C	C6-	H2E1-ATP
C	C7-	H2E1-P
C	C8-	H2E2-P
C	C9-	HE2-P
C	C10-	E2-P
C	C11-	KE2-P
C	C12-	K2E2-P
C	C13-	K2E2
C	C14-	K2E2-ATP
C
C	S1-	ATP
C	S2-	ADP
C	S3-	P
C	S4-	K(1)
C	S5-	H(1)
C	S6-	K(2)
C	S7-	H(2)
C
	SOLS=14
	NN=SOLS
	EPSI=1.D-08
C	EPSI=1.D-09
	PTOL=1.D-10
	M1=14
	IERR=0
C
	DO 60 I=1,4
   60   S(3+I)=SS(I)
C
C   START THE SPATIAL ITERATION.
C
   70   ITER=0
   80   ITER=ITER+1
	CALL HKERR(PHI,SOLS,V,C,S,KF,KB)
	MAXPHI=DABS(PHI(1))
	DO 230 J=2,NN
  230   IF (MAXPHI.LT.DABS(PHI(J))) MAXPHI=DABS(PHI(J))
C	IF (ITER.EQ.1) GO TO 240
	IF(MAXPHI.LT.EPSI) GO TO 558
C
C
C THE PHI ARE TOO LARGE.
C   WE WILL DETERMINE THE DERIVATIVE OF THE PHI WITH RESPECT TO
C THE VARIABLES,C, AND STORE THESE IN THE ARRAY NDERIV( , ).
C
  240  CALL HKJAC(NDERIV,SOLS,V,C,S,KF,KB)
C
C THE JACOBIAN HAS BEEN COMPUTED. THE CURRENT GUESSES
C SIT IN C AND THE ERRORS IN PHI.  IT REMAINS TO COMPUTE
C NDERIV-1(PHI) AT THE CORRECTION TO BE SUBTRACTED FROM C.
C
	CALL LES8(NDERIV,PHI,PR,PFL,NN,SW,PTOL,DELC,M1)
	IF (SW) 930,990,930
C
  930   DO 940 J=1,NN
  940   C(J)=C(J)-DELC(J)
C
C
	IF (ITER.LT.25) GO TO 80
C
C IF THE SPATIAL ITERATION FAILS TO CONVERGE WITHIN 15 PASSES
C THE PROGRAM STOPS.
	PRINT 980
  980   FORMAT (' TOO MANY ITERATIONS IN HKATP')
  990   STOP
C
C
  558   VV=V(3)*1.D6
  600   RETURN
	END
C
	SUBROUTINE HKERR(PHI,SOLS,V,C,S,KF,KB)
C
	INTEGER SOLS
C
	DOUBLE PRECISION
     1   V,C,S,KF,KB
	DIMENSION
     1   S(7),KF(15),KB(15),V(15),C(14)
C
	DOUBLE PRECISION PHI
	DIMENSION PHI(14)
C
C FLUXES
C
	V(1)  =  KF(1)*C(1)*S(1) -  KB(1)*C(2)
	V(2)  =  KF(2)*C(2) -       KB(2)*C(3)*S(4)
	V(3)  =  KF(3)*C(3) -       KB(3)*C(4)*S(4)
	V(4)  =  KF(4)*C(4)*S(5) -  KB(4)*C(5)
	V(5)  =  KF(5)*C(5)*S(5) -  KB(5)*C(6)
	V(6)  =  KF(6)*C(6) -       KB(6)*C(7)*S(2)
	V(7)  =  KF(7)*C(7) -       KB(7)*C(8)
	V(8)  =  KF(8)*C(8) -       KB(8)*C(9)*S(7)
	V(9)  =  KF(9)*C(9) -       KB(9)*C(10)*S(7)
	V(10) = KF(10)*C(10)*S(6) - KB(10)*C(11)
	V(11) = KF(11)*C(11)*S(6) - KB(11)*C(12)
	V(12) = KF(12)*C(12) -      KB(12)*C(13)*S(3)
	V(13) = KF(13)*C(13) -      KB(13)*C(1)
	V(14) = KF(14)*C(13)*S(1) - KB(14)*C(14)
	V(15) = KF(15)*C(14) -      KB(15)*C(2)
C
C ESTABLISH THE ERROR VECTORS, THE "PHI" ARRAY.
C  FIRST, CONSERVATION OF TOTAL CARRIER (SUM OF CI = 1.0)
C
	PHI(1)=-1.D0
	DO 110 I=1,SOLS
  110   PHI(1)=PHI(1) + C(I)
C
C   MASS CONSERVATION IN THE STEADY-STATE CASE
C
	PHI(2)=V(1)+V(15)-V(2)
	PHI(3)=V(2)-V(3)
	PHI(4)=V(3)-V(4)
	PHI(5)=V(4)-V(5)
	PHI(6)=V(5)-V(6)
	PHI(7)=V(6)-V(7)
	PHI(8)=V(7)-V(8)
	PHI(9)=V(8)-V(9)
	PHI(10)=V(9)-V(10)
	PHI(11)=V(10)-V(11)
	PHI(12)=V(11)-V(12)
	PHI(13)=V(12)-V(13)-V(14)
	PHI(14)=V(14)-V(15)
C
  170   CONTINUE
	RETURN
	END
C
	SUBROUTINE HKJAC(DPHI,SOLS,V,C,S,KF,KB)
C
	INTEGER SOLS
C
	DOUBLE PRECISION
     1   V,C,S,KF,KB
	DIMENSION
     1   S(7),KF(15),KB(15),V(15),C(14)
C
	DOUBLE PRECISION DVDC,DPHI
	DIMENSION DVDC(15,14),DPHI(14,14)
C
C
	DO 105 J=1,14
	DO 105 I=1,14
  105   DPHI(I,J)=0.D0
C
C FLUX DERIVATIVES
C
	DVDC(1,1)  =  KF(1)*S(1)
	DVDC(1,2)  =  - KB(1)
C
	DVDC(2,2)  =  KF(2)
	DVDC(2,3)  =  - KB(2)*S(4)
C
	DVDC(3,3)  =  KF(3)
	DVDC(3,4)  =  - KB(3)*S(4)
C
	DVDC(4,4)  =  KF(4)*S(5)
	DVDC(4,5)  =  - KB(4)
C
	DVDC(5,5)  =  KF(5)*S(5)
	DVDC(5,6)  =  - KB(5)
C
	DVDC(6,6)  =  KF(6)
	DVDC(6,7)  =  - KB(6)*S(2)
C
	DVDC(7,7)  =  KF(7)
	DVDC(7,8)  =  - KB(7)
C
	DVDC(8,8)  =  KF(8)
	DVDC(8,9)  =  - KB(8)*S(7)
C
	DVDC(9,9)  =  KF(9)
	DVDC(9,10)  = - KB(9)*S(7)
C
	DVDC(10,10) = KF(10)*S(6)
	DVDC(10,11) = - KB(10)
C
	DVDC(11,11) = KF(11)*S(6)
	DVDC(11,12) = - KB(11)
C
	DVDC(12,12) = KF(12)
	DVDC(12,13) = - KB(12)*S(3)
C
	DVDC(13,13) = KF(13)
	DVDC(13,1) =  - KB(13)
C
	DVDC(14,13) = KF(14)*S(1)
	DVDC(14,14) = - KB(14)
C
	DVDC(15,14) = KF(15)
	DVDC(15,2) =  - KB(15)
C
C ESTABLISH THE ERROR VECTORS, THE "PHI" ARRAY.
C  FIRST, CONSERVATION OF TOTAL CARRIER (SUM OF CI = 1.0)
C
	DO 110 I=1,SOLS
  110   DPHI(1,I)=1.D0
C
C   MASS CONSERVATION IN THE STEADY-STATE CASE
C
	DPHI(2,1)=DVDC(1,1)
	DPHI(2,2)=DVDC(1,2)+DVDC(15,2)-DVDC(2,2)
	DPHI(2,3)=-DVDC(2,3)
	DPHI(2,14)=DVDC(15,14)
C
	DPHI(3,2)=DVDC(2,2)
	DPHI(3,3)=DVDC(2,3)-DVDC(3,3)
	DPHI(3,4)=-DVDC(3,4)
C
	DPHI(4,3)=DVDC(3,3)
	DPHI(4,4)=DVDC(3,4)-DVDC(4,4)
	DPHI(4,5)=-DVDC(4,5)
C
	DPHI(5,4)=DVDC(4,4)
	DPHI(5,5)=DVDC(4,5)-DVDC(5,5)
	DPHI(5,6)=-DVDC(5,6)
C
	DPHI(6,5)=DVDC(5,5)
	DPHI(6,6)=DVDC(5,6)-DVDC(6,6)
	DPHI(6,7)=-DVDC(6,7)
C
	DPHI(7,6)=DVDC(6,6)
	DPHI(7,7)=DVDC(6,7)-DVDC(7,7)
	DPHI(7,8)=-DVDC(7,8)
C
	DPHI(8,7)=DVDC(7,7)
	DPHI(8,8)=DVDC(7,8)-DVDC(8,8)
	DPHI(8,9)=-DVDC(8,9)
C
	DPHI(9,8)=DVDC(8,8)
	DPHI(9,9)=DVDC(8,9)-DVDC(9,9)
	DPHI(9,10)=-DVDC(9,10)
C
	DPHI(10,9)=DVDC(9,9)
	DPHI(10,10)=DVDC(9,10)-DVDC(10,10)
	DPHI(10,11)=-DVDC(10,11)
C
	DPHI(11,10)=DVDC(10,10)
	DPHI(11,11)=DVDC(10,11)-DVDC(11,11)
	DPHI(11,12)=-DVDC(11,12)
C
	DPHI(12,11)=DVDC(11,11)
	DPHI(12,12)=DVDC(11,12)-DVDC(12,12)
	DPHI(12,13)=-DVDC(12,13)
C
	DPHI(13,12)=DVDC(12,12)
	DPHI(13,13)=DVDC(12,13)-DVDC(13,13)-DVDC(14,13)
	DPHI(13,14)=-DVDC(14,14)
	DPHI(13,1)=-DVDC(13,1)
C
	DPHI(14,13)=DVDC(14,13)
	DPHI(14,14)=DVDC(14,14)-DVDC(15,14)
	DPHI(14,2)= -DVDC(15,2)
C
C
  170   CONTINUE
	RETURN
	END
