	PROGRAM PN
C
C PROGRAM TO BUILD EITHER A SUPERFICIAL OR JUXTAMEDULLARY NEPHRON
C   SF NEPHRON IS A SERIES ENTITY: SFPCT, SFPST, sDHL
C   JM NEPHRON IS A SERIES: JMPCT, JMPST, lDHLu, lDHLl, tAHL
C IN ITS INITIAL FORMULATION (12/27/10), THE PROGRAM WILL OUTPUT ONLY
C   ONE OR THE OTHER NEPHRON.  ULTIMATELY THERE WILL BE 5 JM NEPHRONS
C   DESCENDING 1,...,6 MM INTO THE INNER MEDULA
C
C 12/22/12 - ARCHIVAL VARIABLES ADDED IN ANTICIPATION OF MULTIPLE NEPHRONS
C THERE ARE TWO MEASURES OF DISTANCE ALONG THE NEPHRON:
C    X IS AN INTEGER VARIABLE, AND WILL NOW BE ZEROED WITH EACH SEGMENT
C    DIST IS A REAL VARIABLE THAT TRACKS DISTANCE ALONG THE NEPHRON
C    ALTHOUGH THIS WILL BECOME AMBIGUOUS AS DIFFERENT LENGTHS COALESCE IN CNT
C
C 2/8/13 - TGF ADJUSTS SNGFR ACCORDING TO MACULA DENSA [CL-]i 
C    AND EARLY PT PRESSURE ACCORDING TO DCT PRESSURE.
C
	INTEGER SOLS,TAU,T,TLIM,COUNT,EXP,NPAR,X,CHOP
C
C       SOLS-   NUMBER OF SOLUTES
C       TAU-    INDICATES STEADY STATE (=0) OR TIMED (=1) EXPT.
C       T-      INDEX FOR OLD (=1) OR NEW (=2) TIME STEP
C       COUNT-  NUMBER OF EXPT. BEING SIMULATED
C       EXP-    TOTAL NUMBER OF EXPTS. IN THE RUN
C	NPAR-	NUMBER OF PARAMETERS ICREMENTED IN A TRANSIENT PROBLEM.
C	X-	INDICATES SPATIAL STEP
C	CHOP-	SPATIAL CHOP OF TUBULE
C
C GENERAL PARAMETERS
	DOUBLE PRECISION
     1   Z(15),RT,RTE,F,DIST,
     1   EPSI,DT,RTAU,TIME,L0,L(1601,2),
     1   PKC,PKF,PKN,PKP,KHY(5),KDHY(5)
C LUMINAL AND PERITUBULAR PARAMETERS
	DOUBLE PRECISION
     1   VM(1601,2),PM(1601,2),CM(15,1601,2),
     1   IMPM(1601,2),LCHM(1601),XM(15,1601),
     1   VS(1601,2),PS(1601,2),CS(15,1601,2),
     1   IMPS(1601,2),LCHS(1601),XS(15,1601),
     1   TL,DX,RM0,MUM,ETA,ZIMPS,
     1   SM(1601,2),AM(1601,2),FVM(1601,2),FKM(16,1601,2)
C INTERSPACE PARAMETERS
	DOUBLE PRECISION
     1   AME,AE0,AE(1601,2),MUA,CHVL0,CHVL(1601,2),MUV,
     1   LPME,LPES,SME(15),SES(15),
     1   HME(15),HES(15),CME(15),CES(15),
     1   VE(1601,2),PE(1601,2),CE(15,1601,2),LCHE(1601),XE(15,1601),
     1   FEVM(1601,2),FEKM(15,1601,2),FEVS(1601,2),FEKS(15,1601,2),
     1   CURE(1601)
C CELL PARAMETERS
	DOUBLE PRECISION
     1   AIE(3),AMI(3),AIS(3),AI0(3),CLVL0(3),IMP0(3),CLVL(3,1601,2),
     1   ZIMP(3),TBUF(3),PKB(3),CBUF(3,1601,2),HCBUF(3,1601,2),
     1   LPMI(3),LPIS(3),SMI(3,15),SIS(3,15),
     1   HMI(3,15),HIS(3,15),CMI(3,15),CIE(3,15),CIS(3,15),
     1   LMI(3,15,15),LIS(3,15,15),
     1   ATMI(3,15,1601),ATIS(3,15,1601),ATIE(3,15,1601),
     1   VI(3,1601,2),PI(3,1601,2),CI(3,15,1601,2),IMP(3,1601),
     1   LCHI(3,1601),XI(3,15,1601),FIVM(3,1601,2),FIKM(3,15,1601,2),
     1   FIVS(3,1601,2),FIKS(3,15,1601,2),CURI(3,1601),JV(3,1601,2),
     1   JK(3,15,1601,2)
C SPECIAL TRANSPORTERS
	CHARACTER*1 ISOFM
	DOUBLE PRECISION
     1   NP(3),KNPN(3),KNPK(3),KNH4(3),NPHK(3),
     1   LHP(3),XIHP(3),XHP(3),NAE1(3),NTSC(3),NNHE3(3),
     1   JNAK(3,3,1601,2),JHK(3,1601,2),JHP(3,1601,2),
     1   JAE1(3,1601,2),JTSC(3,1601,2),JNHE3(3,3,1601,2),QIAMM,
     1   NNKCC(3),NKCL(3),JNKCC(3,4,1601,2),JKCC(3,3,1601,2)
C TORQUE AND COMPLIANCE VARIABLES
	DOUBLE PRECISION
     1   TQM(81,2),RM(81,2),MUR,SCALMI,SCALIS,VM0,AM0,TQM0,
     1   LHP0(3),NP0(3),NNHE30(3),LPMI0(3),LPIS0(3),
     1   HMI0(3,15),HIS0(3,15),LMI0(3,15,15),LIS0(3,15,15),
     1   QIAMM0,MVL,MVD,RMT0
C
C   SUBSCRIPTS (CELL TYPE,SOLUTE,DISTANCE,TIME)
C     INDICES FOR THE CELL TYPE: 1=PRINCIPAL; 2=ALPHA; 3=BETA
C
C       Z-      VALENCE OF I'TH SOLUTE
C       ZIMP-   VALENCE OF IMPERMEANT SPECIES
C       RT-     GAS CONST. TIMES TEMP  (MMHG.ML/MMOL)
C       RTE-    GAS CONST. TIMES TEMP  (JOULE/MMOL)
C       F-      FARADAY (COUL/MOL)
C
C       EPSI-   TOLERANCE FOR THE ERROR VECTOR
C       DT-     TIME STEP
C       RTAU-   REAL REPRESENTATION OF THE INTEGER TAU
C	TIME-	ELAPSED TIME OF THE SIMULATED EXPT.
C
C       L-      CELL HEIGHT
C       L0-     CELL MEMBRANE HEIGHT
C       MUA-    CHANNEL AREA COMPLIANCE
C       MUV-    CHANNEL VOLUME COMPLIANCE
C
C       AME-    AREA OF TIGHT JUNCTION
C       AE-     CHANNEL AREA AT BASE
C       AMI-    LUMINAL CELL AREA
C       AIE-    LATERAL CELL AREA
C       AIS-    BASAL CELL AREA
C
C       CHVL-   CHANNEL VOLUME
C       CLVL-   CELL VOLUME
C       CHVL0-  REFERENCE CELL VOLUME
C       CLVL0-  REFERENCE CELL VOLUME
C       IMP0-  CELL IMPERMEANT SPECIES CONC. AT REFERENCE VOLUME
C       IMP-    CELL IMPERMEANT SPECIES CONC. AT CLVL
C
C	CBUF-	CELL BUFFER CONCENTRATION
C	HCBUF-	PROTONATED CELL BUFFER
C	TBUF-	TOTAL CELL BUFFER CONCENTRATION FOR THE REFERENCE VOLUME
C	PK.-	.=B,C,P  FOR PK OF CELL BUFFERS, HCO3, OR HPO4
C	KHY.,KDHY.-  .=P,A,B,E HYDRATION/DEHYDRATION CONSTANT FOR CO2
C
C       LP..-   WATER PERMEABILITY (CM/SEC.MMHG)
C       S..-    REFLECTION COEFFICIENT
C       H..-    SOLUTE PERMEABILITY (CM/SEC)
C       C..-    MEAN SOLUTE CONCENTRATION
C	        ME-     TIGHT JUNCTION
C               MI-     CELL MUCOSA
C               IE-     LATERAL CELL
C               ES-     CHANNEL BASEMENT MEMBRANE
C               IS-     CELL SEROSA
C
C       LM,LS-  MATRICES OF ONSAGER COEFFICIENTS FOR MUCOSAL
C               AND BASOLATERAL CELL MEMBRANES
C
C       V.-     VOLTAGE (MVOLT)
C       P.-     PRESSURE (MMHG)
C       C.-     CONCENTRATION (MMOL/ML)
C       X.-     ELECTROCHEMICAL POTENTIAL
C	LCH.-	LOG CONCENTRATION HYDROGEN (PH)
C               . = M,S,I,E
C
C       IMP.-   IMPERMEANT SPECIES CONCENTRATION
C		. = M,S
C
C       NP-     NA+ EXTRUSION OUT THE LATERAL CELL MEMBRANE
C	KNPN-	NA AFFINITY FOR THE PUMP
C	KNPK-	K AFFINITY FOR THE PUMP
C       KNH4-   RELATIVE AFFINITY FOR NH4+ FOR THE PUMP
C	ATMI-	ACTIVE TRANSPORT ACROSS THE LUMINAL MEMBRANE
C	ATIS-	ACTIVE TRANSPORT ACROSS THE PERITUBULAR MEMBRANE
C	NPHK-	ABUNDANCE OF H-K-ATPASE
C	NAE1-	ABUNDANCE OF AE1
C	NTSC-	ABUNDANCE OF TSC
C	NNHE3-	ABUNDANCE OF NHE3
C
C	JNAK-	FLUX (MMOL/S) ACROSS THE PERITUBULAR NA,K-ATPASE
C	JHK-	FLUX ACROSS THE LUMINAL H,K-ATPASE
C	JHP-	FLUX ACROSS THE H-ATPASE
C	JAE1-	FLUX ACROSS AE1
C	JTSC-	FLUX ACROSS TSC
C	JNHE3-	FLUX ACROSS NHE3
C
C       FEVM-   JUCTION VOLUME FLOW (ML/SEC)
C       FEKM-   JUNCTION SOLUTE FLUX (MMOL/SEC)
C       FIVM-   CELL APICAL VOLUME FLOW
C       FIKM-   CELL APICAL SOLUTE FLUX
C       FEVS-   CHANNEL BASEMENT MEMBRANE VOLUME FLOW
C       FEKS-   CHANNEL BASEMENT MEMBRANE SOLUTE FLUX
C       FIVS-   BASAL CELL VOLUME FLOW
C       FIKS-   BASAL CELL SOLUTE FLUX
C       CURE-   CHANNEL CURRENT (MAMP)
C       CURI-   CELL CURRENT
C       JV-     LATERAL CELL MEMBRANE VOLUME FLOW
C       JS-     LATERAL CELL MEMBRANE SOLUTE FLUX
C
C	TL-	TUBULE LENGTH
C	DX-	SPATIAL STEP OF INTEGRATION
C	RM0-	TUBULE RADIUS AT ZERO TRANSTUBULAR PRESSURE
C	MUM-	NUMBER OF TUBULES AT THE START OF THE SEGMENT
C	ETA-	TUBULE FLUID VISCOSITY
C	SM-	LUMINAL CIRCUMFERENCE
C	AM-	LUMINAL AREA
C	FVM-	LUMINAL VOLUME FLOW RATE
C	FKM-	LUMINAL SOLUTE FLUX RATE
C
	CHARACTER*2 SWNEPH
C	SWNEPH-	DIRECTING THE CALCULATION TO SF (SFPCT, SFPST, SDHL)
C       	OR JM NEPHRON (JMPCT, JMPST, LDHLU, LDHLL, TAHL)
C
C KEY TO INDICES:
C  6 nephrons: SF (INEPH = 1) plus 5 JM (INEPH = 2-6)
C    SFPCT and SFPST in series with SDHL
C    JMPCT and JMPST in series with LDHLu and LDHLl
C  LDHLu will be restricted to OM and LDHLl to IM
C
C Plan for 24000 SF nephrons 12000 JM nephrons
C  Of the 12000 JM, turns can parallel CD coning:
C    1 mm 6000
C    2 mm 3000
C    3 mm 1500
C    4 mm  750
C    5 mm  375
C
C Segment numbers (ISEG)
C      1- PCT
C      2- PST
C      3- sDHL, lDHLu
C      4- lDHLl
C      5- tAHL
C      6- AHLm
C      7- AHLc
C      8- DCT
C      9- CNT
C      10-CCD
C      11-OMCD
C      12-IMCD
C
	INTEGER IARCH,INEPH,ISEG
C  IARCH = 0 (ARCHIVE)   = 1 (RETRIEVE)   = 2 (INITIALIZE THE NEXT SEGMENT)
C
	INTEGER 
     1   RX(6,12), RCHOP(6,12)
C
C GENERAL PARAMETERS
	DOUBLE PRECISION
     1   RDIST(6,12), REPSI(6,12), RL0(6,12),
     1   RL(6,12,901,2), RKHY(6,12,5), RKDHY(6,12,5)
C
C LUMINAL AND PERITUBULAR PARAMETERS
	DOUBLE PRECISION
     1   RVM(6,12,901,2), RPM(6,12,901,2), RCM(6,12,15,901,2),
     1   RIMPM(6,12,901,2), RLCHM(6,12,901), RXM(6,12,15,901),
     1   RVS(6,12,901,2), RPS(6,12,901,2), RCS(6,12,15,901,2),
     1   RIMPS(6,12,901,2), RLCHS(6,12,901), RXS(6,12,15,901),
     1   RTL(6,12), RDX(6,12), RRM0(6,12),
     1   RMUM(6,12), RETA(6,12), RSM(6,12,901,2),
     1   RAM(6,12,901,2), RFVM(6,12,901,2), RFKM(6,12,16,901,2)
C
C INTERSPACE PARAMETERS
	DOUBLE PRECISION
     1   RAME(6,12), RAE0(6,12), RAE(6,12,901,2),
     1   RMUA(6,12), RCHVL0(6,12), RCHVL(6,12,901,2),
     1   RMUV(6,12), RLPME(6,12), RLPES(6,12),
     1   RSME(6,12,15), RSES(6,12,15), RHME(6,12,15),
     1   RHES(6,12,15), RVE(6,12,901,2), RPE(6,12,901,2),
     1   RCE(6,12,15,901,2), RLCHE(6,12,901), RXE(6,12,15,901),
     1   RFEVM(6,12,901,2), RFEKM(6,12,15,901,2), RFEVS(6,12,901,2),
     1   RFEKS(6,12,15,901,2), RCURE(6,12,901)
C
C CELL PARAMETERS
	DOUBLE PRECISION
     1   RAIE(6,12,3), RAMI(6,12,3), RAIS(6,12,3),
     1   RAI0(6,12,3), RCLVL0(6,12,3), RIMP0(6,12,3),
     1   RCLVL(6,12,3,901,2), RZIMP(6,12,3), RTBUF(6,12,3),
     1   RPKB(6,12,3), RCBUF(6,12,3,901,2), RHCBUF(6,12,3,901,2),
     1   RLPMI(6,12,3), RLPIS(6,12,3), RSMI(6,12,3,15),
     1   RSIS(6,12,3,15), RHMI(6,12,3,15), RHIS(6,12,3,15),
     1   RLMI(6,12,3,15,15), RLIS(6,12,3,15,15), RATMI(6,12,3,15,901),
     1   RATIS(6,12,3,15,901), RATIE(6,12,3,15,901), RVI(6,12,3,901,2),
     1   RPI(6,12,3,901,2), RCI(6,12,3,15,901,2), RIMP(6,12,3,901),
     1   RLCHI(6,12,3,901), RXI(6,12,3,15,901), RFIVM(6,12,3,901,2),
     1   RFIKM(6,12,3,15,901,2), RFIVS(6,12,3,901,2), 
     1   RFIKS(6,12,3,15,901,2), RCURI(6,12,3,901), 
     1   RJV(6,12,3,901,2), RJK(6,12,3,15,901,2)
C
C SPECIAL TRANSPORTERS
	CHARACTER*1 RISOFM(6,12)
	DOUBLE PRECISION
     1   RNP(6,12,3), RKNPN(6,12,3), RKNPK(6,12,3),
     1   RKNH4(6,12,3), RNPHK(6,12,3), RLHP(6,12,3),
     1   RXIHP(6,12,3), RXHP(6,12,3), RNAE1(6,12,3),
     1   RNTSC(6,12,3), RNNHE3(6,12,3), RJNAK(6,12,3,3,901,2),
     1   RJHK(6,12,3,901,2), RJHP(6,12,3,901,2), RJAE1(6,12,3,901,2),
     1   RJTSC(6,12,3,901,2), RJNHE3(6,12,3,3,901,2), RQIAMM(6,12),
     1   RNNKCC(6,12,3), RNKCL(6,12,3), RJNKCC(6,12,3,4,901,2),
     1   RJKCC(6,12,3,3,901,2)
C
C TORQUE AND COMPLIANCE VARIABLES
	DOUBLE PRECISION
     1   RTQM(6,12,501,2), RRM(6,12,501,2), RMUR(6,12), RSCALMI(6,12),
     1   RSCALIS(6,12), RVM0(6,12), RAM0(6,12), RTQM0(6,12),
     1   RLHP0(6,12,3), RNP0(6,12,3), RNNHE30(6,12,3), RLPMI0(6,12,3),
     1   RLPIS0(6,12,3), RHMI0(6,12,3,15), RHIS0(6,12,3,15),
     1   RLMI0(6,12,3,15,15), RLIS0(6,12,3,15,15), RQIAMM0(6,12),
     1   RMVL(6,12), RMVD(6,12), RRMT0(6,12)
C
C TGF VARIABLES: STARTING WITH THE BASELINE SNGFR, 
C   IT IS ADJUSTED ACCORDING TO MACULA DENSA CELL [CL-] 
C INITIAL PT PRESSURE IS ADJUSTED ACCORDING TO A DISTAL NEPHRON RESISTANCE
C
	DOUBLE PRECISION 
     1   FVM0,AFVM,DFVM,AFVM0,DFVM0,MDCL,DMDCL,DNR,
     1   TGGAM(2),TGPHI(2),TGPPHI(2),TGEPSI,TGJAC(2,2),TGJACI(2,2),
     1   TGDGAM(2),TGDELG(2),TGDETJ
C 
C	FVM0-	SNGFR READ FROM BOUND.DAT
C	AFVM-	FIXED COMPONENT OF FVM0
C	DFVM-	COMPONENT OF FVM0 THAT CAN BE MODULATED BY TGF
C	MDCL-	MACULA DENSA CL- REFERENCE CONCENTRATION
C	DMDCL-	MACULA DENSA CL- RANGE YIELDING DFVM
C	TGGAM-	TG FEEDBACK VARIABLE (CHANGE IN FV)
C	TGPHI-	TG FEEDBACK RELATION
C	TGEPSI-	TG FEEDBACK ERROR
C	TGJAC-	TG FEEDBACK JACOBIAN 
C	TGDETJ-	TG FEEDBACK JACOBIAN DETERMINANT
C	TGJACI-	TG FEEDBACK JACOBIAN INVERSE
C	TGDGAM-	TG FEEDBACK VARIABLE INCREMENT
C	TGDELG-	TG FEEDBACK VARIABLE NEWTON CORRECTION
C
C         TGPHI(1) = FVM(0) - AFVM - (DFVM / DMDCL) * [MDCL - CIAHL]
C         TGPHI(2) = PMAHL - DNR*FVMAHL
C	
        COMMON SOLS,T,X,CHOP,
     1   Z,RT,RTE,F,
     1   EPSI,DT,RTAU,TIME,DIST,
     1   PKC,PKF,PKN,PKP,KHY,KDHY,L0,L,
     1   VM,PM,CM,IMPM,LCHM,XM,
     1   VS,PS,CS,IMPS,LCHS,XS,
     1   TL,DX,RM0,MUM,ETA,ZIMPS,
     1   SM,AM,FVM,FKM,
     1   AME,AE0,AE,MUA,CHVL0,CHVL,MUV,
     1   LPME,LPES,SME,SES,
     1   HME,HES,CME,CES,
     1   VE,PE,CE,LCHE,XE,
     1   FEVM,FEKM,FEVS,FEKS,CURE,
     1   AIE,AMI,AIS,AI0,CLVL0,IMP0,CLVL,
     1   ZIMP,TBUF,PKB,CBUF,HCBUF,
     1   LPMI,LPIS,SMI,SIS,
     1   HMI,HIS,CMI,CIE,CIS,
     1   LMI,LIS,ATMI,ATIS,ATIE,
     1   VI,PI,CI,IMP,LCHI,XI,
     1   FIVM,FIKM,FIVS,FIKS,CURI,
     1   JV,JK
	COMMON/KINET/ ISOFM,
     1   NP,KNPN,KNPK,KNH4,NPHK,
     1   LHP,XIHP,XHP,NAE1,NTSC,NNHE3,
     1   JNAK,JHK,JHP,JAE1,JTSC,JNHE3,QIAMM,
     1   NNKCC,NKCL,JNKCC,JKCC
	COMMON/TORQUE/
     1   TQM,RM,MUR,SCALMI,SCALIS,VM0,AM0,TQM0,
     1   LHP0,NP0,NNHE30,LPMI0,LPIS0,
     1   HMI0,HIS0,LMI0,LIS0,QIAMM0,MVL,MVD,RMT0
C
C
	COMMON /ARCH/
     1   RX, RCHOP,
     1   RDIST, REPSI, RL0, RL, RKHY, RKDHY,
     1   RVM, RPM, RCM, RIMPM, RLCHM, RXM,
     1   RVS, RPS, RCS, RIMPS, RLCHS, RXS,
     1   RTL, RDX, RRM0, RMUM, RETA, RSM, RAM,
     1   RFVM, RFKM,
     1   RAME, RAE0, RAE, RMUA, RCHVL0, RCHVL,
     1   RMUV, RLPME, RLPES, RSME, RSES,
     1   RHME, RHES, RVE, RPE,
     1   RCE, RLCHE, RXE, RFEVM, RFEKM,
     1   RFEVS, RFEKS, RCURE,
     1   RAIE, RAMI, RAIS, RAI0, RCLVL0, RIMP0,
     1   RCLVL, RZIMP, RTBUF, RPKB, RCBUF, RHCBUF,
     1   RLPMI, RLPIS, RSMI, RSIS, RHMI, RHIS,
     1   RLMI, RLIS, RATMI, RATIS, RATIE, RVI, RPI,
     1   RCI, RIMP, RLCHI, RXI, RFIVM, RFIKM,
     1   RFIVS, RFIKS, RCURI, RJV, RJK, RISOFM,
     1   RNP, RKNPN, RKNPK, RKNH4, RNPHK, RLHP,
     1   RXIHP, RXHP, RNAE1, RNTSC, RNNHE3,
     1   RJNAK, RJHK, RJHP, RJAE1, RJTSC, RJNHE3,
     1   RQIAMM, RNNKCC, RNKCL, RJNKCC, RJKCC,
     1   RTQM, RRM, RMUR, RSCALMI, RSCALIS, 
     1   RVM0, RAM0, RTQM0, RLHP0, RNP0, RNNHE30,
     1   RLPMI0, RLPIS0, RHMI0, RHIS0, RLMI0, 
     1   RLIS0, RQIAMM0, RMVL, RMVD, RRMT0
C
C
	OPEN (10,FILE='lumen.dat')
	OPEN (11,FILE='blood.dat')
	OPEN (12,FILE='xy.co2')
	OPEN (13,FILE='tgf.dat')
	OPEN (16,FILE='xy.osm')
	OPEN (17,FILE='torque.dat')
	OPEN (19,FILE='errlog')
	OPEN (23,FILE='xy.dat')
	OPEN (200,FILE='ahlci.dat')
	OPEN (201,FILE='gluc.dat')
C
C
	OPEN (160,FILE='sfpct/sfpctparam.dat')
	OPEN (161,FILE='sfpct/sfpctresult.dat')
	OPEN (162,FILE='sfpct/sfpctbound.dat')
	OPEN (163,FILE='sfpct/sfpctptpick.dat')
	OPEN (164,FILE='sfpct/sfpctguess.dat')
	OPEN (166,FILE='sfpct/sfpctptim.dat')
	OPEN (167,FILE='sfpct/sfpctfluxes.dat')
	OPEN (168,FILE='sfpct/sfpctxy.qo2')
C
	OPEN (150,FILE='sfpst/sfpstparam.dat')
	OPEN (151,FILE='sfpst/sfpstresult.dat')
	OPEN (152,FILE='sfpst/sfpstbound.dat')
	OPEN (153,FILE='sfpst/sfpstptpick.dat')
	OPEN (154,FILE='sfpst/sfpstguess.dat')
	OPEN (156,FILE='sfpst/sfpstptim.dat')
	OPEN (157,FILE='sfpst/sfpstfluxes.dat')
	OPEN (158,FILE='sfpst/sfpstxy.qo2')
C
	OPEN (140,FILE='jmpct/jmpctparam.dat')
	OPEN (141,FILE='jmpct/jmpctresult.dat')
	OPEN (142,FILE='jmpct/jmpctbound.dat')
	OPEN (143,FILE='jmpct/jmpctptpick.dat')
	OPEN (144,FILE='jmpct/jmpctguess.dat')
	OPEN (146,FILE='jmpct/jmpctptim.dat')
	OPEN (147,FILE='jmpct/jmpctfluxes.dat')
	OPEN (148,FILE='jmpct/jmpctxy.qo2')
C
	OPEN (130,FILE='jmpst/jmpstparam.dat')
	OPEN (131,FILE='jmpst/jmpstresult.dat')
	OPEN (132,FILE='jmpst/jmpstbound.dat')
	OPEN (133,FILE='jmpst/jmpstptpick.dat')
	OPEN (134,FILE='jmpst/jmpstguess.dat')
	OPEN (136,FILE='jmpst/jmpstptim.dat')
	OPEN (137,FILE='jmpst/jmpstfluxes.dat')
	OPEN (138,FILE='jmpst/jmpstxy.qo2')
C
	OPEN (120,FILE='sdhl/sdhlparam.dat')
	OPEN (121,FILE='sdhl/sdhlresult.dat')
	OPEN (122,FILE='sdhl/sdhlbound.dat')
	OPEN (123,FILE='sdhl/sdhlptpick.dat')
	OPEN (124,FILE='sdhl/sdhlguess.dat')
	OPEN (126,FILE='sdhl/sdhlptim.dat')
	OPEN (127,FILE='sdhl/sdhlfluxes.dat')
C
	OPEN (110,FILE='ldhlu/ldhluparam.dat')
	OPEN (111,FILE='ldhlu/ldhluresult.dat')
	OPEN (112,FILE='ldhlu/ldhlubound.dat')
	OPEN (113,FILE='ldhlu/ldhluptpick.dat')
	OPEN (114,FILE='ldhlu/ldhluguess.dat')
	OPEN (116,FILE='ldhlu/ldhluptim.dat')
	OPEN (117,FILE='ldhlu/ldhlufluxes.dat')
C
	OPEN (100,FILE='ldhll/ldhllparam.dat')
	OPEN (101,FILE='ldhll/ldhllresult.dat')
	OPEN (102,FILE='ldhll/ldhllbound.dat')
	OPEN (103,FILE='ldhll/ldhllptpick.dat')
	OPEN (104,FILE='ldhll/ldhllguess.dat')
	OPEN (106,FILE='ldhll/ldhllptim.dat')
	OPEN (107,FILE='ldhll/ldhllfluxes.dat')
C
	OPEN (90,FILE='tahl/tahlparam.dat')
	OPEN (91,FILE='tahl/tahlresult.dat')
	OPEN (92,FILE='tahl/tahlbound.dat')
	OPEN (93,FILE='tahl/tahlptpick.dat')
	OPEN (94,FILE='tahl/tahlguess.dat')
	OPEN (96,FILE='tahl/tahlptim.dat')
	OPEN (97,FILE='tahl/tahlfluxes.dat')
C
	OPEN (80,FILE='ahlm/ahlmparam.dat')
	OPEN (81,FILE='ahlm/ahlmresult.dat')
	OPEN (82,FILE='ahlm/ahlmbound.dat')
	OPEN (83,FILE='ahlm/ahlmptpick.dat')
	OPEN (84,FILE='ahlm/ahlmguess.dat')
	OPEN (86,FILE='ahlm/ahlmptim.dat')
	OPEN (87,FILE='ahlm/ahlmfluxes.dat')
C
	OPEN (70,FILE='ahlc/ahlcparam.dat')
	OPEN (71,FILE='ahlc/ahlcresult.dat')
	OPEN (72,FILE='ahlc/ahlcbound.dat')
	OPEN (73,FILE='ahlc/ahlcptpick.dat')
	OPEN (74,FILE='ahlc/ahlcguess.dat')
	OPEN (76,FILE='ahlc/ahlcptim.dat')
	OPEN (77,FILE='ahlc/ahlcfluxes.dat')
C
C
C EXPERIMENTS WILL CYCLE FROM THIS POINT.
C
C  SOLUTE INDEX:
C	1-	NA+
C	2-	K+
C	3-	CL-
C	4-	HCO3-
C	5-	H2CO3
C	6-	CO2
C	7-	HPO4--
C	8-	H2PO4-
C	9-	UREA
C	10-	NH3
C	11-	NH4+
C	12-	H+
C	13-	HCO2-
C	14-	H2CO2
C	15-	GLUC
C
C  IN DHL AND BEYOND, THE SOLUTES ARE TRUNCATED TO THE FIRST 12
C    WITH HCO2- ADDED TO CL- AND GLUC BECOMING IMPM
C
	ZIMPS=0.D0
	ZIMPM=0.D0
C
	PRINT 10
   10   FORMAT(' SUPERFICIAL OR JUXTAMEDULLARY (sf/jm): ',$)
	READ *, SWNEPH
	IF (SWNEPH.EQ.'sf') THEN
	INEPH=1
	GO TO 100
	ELSE IF (SWNEPH.EQ.'jm') THEN
	PRINT 15
   15   FORMAT(' PRINT THE JM NEPHRON NUMBER (2-6): ',$)
	READ *, INEPH
	GO TO 200
	ELSE
	PRINT 20
   20   FORMAT (' NO NEPHRON SELECTED')
	STOP
	ENDIF
C
C SUPERFICIAL NEPHRON
  100   CONTINUE
	PRINT 127
  127   FORMAT(' NUMBER OF EXPERIMENTS = ',$)
	READ *, EXP
	TGGAM(1) = 1.0
	TGDGAM(1) = 0.01
	TGDGAM(2) = 0.1
	DO 190 COUNT=1,EXP
C
C TG FEEDBACK SETTINGS:
	READ(13,8) TGEPSI,AFVM0,DFVM0,MDCL,DMDCL,DNR
    8   FORMAT(6D12.4)
C
	TAU=0
	T=0
	TIME=0.D0
  140   T=T+1
C
	SOLS=15
	CALL SFPCTNEWT(COUNT,0)
C
	FVM0 = FVM(1,1)
	AFVM = AFVM0*FVM0
	DFVM = DFVM0*FVM0
	TGGAM(2) = PM(1,1)
C
	CALL ARCHIVE(0,INEPH,1)
	CALL ARCHIVE(2,INEPH,1)
C
	CALL SFPSTNEWT(COUNT,0)
	CALL ARCHIVE(0,INEPH,2)
	CALL ARCHIVE(2,INEPH,2)
C
C At end-PT HCO2- gets added to Cl- and glucose gets added to IMPM
C
	SOLS=12
	CM(3,1,T)=CM(3,1,T)+CM(13,CHOP+1,T)
	IMPM(1,T)=IMPM(1,T)+CM(15,CHOP+1,T)
	CALL SDHLNEWT(COUNT,0)
	CALL ARCHIVE(0,INEPH,3)
	CALL ARCHIVE(2,INEPH,3)
C
	CALL AHLMNEWT(COUNT,0)
	CALL ARCHIVE(0,INEPH,6)
	CALL ARCHIVE(2,INEPH,6)
C
	CALL AHLCNEWT(COUNT,0)
	CALL ARCHIVE(0,INEPH,7)
	CALL ARCHIVE(2,INEPH,7)
C
C INSERT THE TGF ITERATIONS HERE
C  CALLS TO THE *NEWT PROGRAMS SHOULD NOT REREAD PARAMETERS OR BOUNDARY DATA
C	
  170   ITER=0
  180   ITER=ITER+1
	PRINT 182, ITER
  182   FORMAT(16X,'TGF ITER=',I5,$)
	TGPHI(1) = RFVM(INEPH,1,1,1) - AFVM -
     1     (DFVM / DMDCL) * (MDCL - RCI(INEPH,7,1,3,CHOP+1,1))
	TGPHI(2) = 
     1     1.D-7*(RPM(INEPH,7,CHOP+1,1) - DNR*RFVM(INEPH,7,CHOP+1,1))
	PRINT 184, (TGGAM(K),K=1,2), (TGPHI(K),K=1,2)
  184   FORMAT (8X,'TGGAM =',3X,2D12.4,8X,'TGPHI=',3X,2D12.4)
	IF((DABS(TGPHI(1)).LT.TGEPSI).AND.(DABS(TGPHI(2)).LT.TGEPSI)) 
     1     GO TO 401
C
C THE PHI ARE TOO LARGE.
C
	DO 188 II=1,2
	TGGAM(II) = TGGAM(II) + TGDGAM(II)
	SOLS=15
	CALL ARCHIVE(1,INEPH,1)
	FVM(1,1) = TGGAM(1)*FVM0
	PM(1,1) = TGGAM(2)
	CALL SFPCTNEWT(COUNT,2)
	CALL ARCHIVE(0,INEPH,1)
	CALL ARCHIVE(1,INEPH,2)
	CALL ARCHIVE(2,INEPH,1)
C
	CALL SFPSTNEWT(COUNT,2)
	CALL ARCHIVE(0,INEPH,2)
	CALL ARCHIVE(1,INEPH,3)
	CALL ARCHIVE(2,INEPH,2)
C
C At end-PT HCO2- gets added to Cl- and glucose gets added to IMPM
C
	SOLS=12
	CM(3,1,T)=CM(3,1,T)+RCM(INEPH,2,13,RCHOP(INEPH,2)+1,T)
	IMPM(1,T)=IMPM(1,T)+RCM(INEPH,2,15,RCHOP(INEPH,2)+1,T)
	CALL SDHLNEWT(COUNT,2)
	CALL ARCHIVE(0,INEPH,3)
	CALL ARCHIVE(1,INEPH,6)
	CALL ARCHIVE(2,INEPH,3)
C
	CALL AHLMNEWT(COUNT,2)
	CALL ARCHIVE(0,INEPH,6)
	CALL ARCHIVE(1,INEPH,7)
	CALL ARCHIVE(2,INEPH,6)
C
	CALL AHLCNEWT(COUNT,2)
	CALL ARCHIVE(0,INEPH,7)
	CALL ARCHIVE(2,INEPH,7)
C
	TGPPHI(1) = RFVM(INEPH,1,1,1) - AFVM - 
     1     (DFVM / DMDCL) * (MDCL - RCI(INEPH,7,1,3,CHOP+1,1))
	TGPPHI(2) = 
     1     1.D-7*(RPM(INEPH,7,CHOP+1,1) - DNR*RFVM(INEPH,7,CHOP+1,1))
C
	TGJAC(1,II) = (TGPPHI(1) - TGPHI(1))/TGDGAM(II)
	TGJAC(2,II) = (TGPPHI(2) - TGPHI(2))/TGDGAM(II)
	TGGAM(II) = TGGAM(II) - TGDGAM(II)
	FVM(1,1) = TGGAM(1)*FVM0
	PM(1,1) = TGGAM(2)
C
  188   CONTINUE
C
	TGDETJ = TGJAC(1,1)*TGJAC(2,2) - TGJAC(1,2)*TGJAC(2,1)
	IF (DABS(TGDETJ).LT.1.D-17) THEN 
	PRINT 189, TGDETJ,((TGJAC(I,J),I=1,2),J=1,2)
  189   FORMAT ('SINGULAR MATRIX: DET= ' D12.4,4X,'TGJAC= ', 4D12.4)
	STOP
	ELSE
	TGJACI(1,1) = TGJAC(2,2)/TGDETJ
	TGJACI(1,2) = -TGJAC(1,2)/TGDETJ
	TGJACI(2,1) = -TGJAC(2,1)/TGDETJ
	TGJACI(2,2) = TGJAC(1,1)/TGDETJ
	ENDIF
C
	TGDELG(1) = TGJACI(1,1)*TGPHI(1) + TGJACI(1,2)*TGPHI(2)
	TGDELG(2) = TGJACI(2,1)*TGPHI(1) + TGJACI(2,2)*TGPHI(2)
C
	TGGAM(1) = TGGAM(1) - TGDELG(1)
	TGGAM(2) = TGGAM(2) - TGDELG(2)
C
	SOLS=15
	CALL ARCHIVE(1,INEPH,1)
	FVM(1,1) = TGGAM(1)*FVM0
	PM(1,1) = TGGAM(2)
	CALL SFPCTNEWT(COUNT,2)
	CALL ARCHIVE(0,INEPH,1)
	CALL ARCHIVE(1,INEPH,2)
	CALL ARCHIVE(2,INEPH,1)
C
	CALL SFPSTNEWT(COUNT,2)
	CALL ARCHIVE(0,INEPH,2)
	CALL ARCHIVE(1,INEPH,3)
	CALL ARCHIVE(2,INEPH,2)
C
C At end-PT HCO2- gets added to Cl- and glucose gets added to IMPM
C
	SOLS=12
	CM(3,1,T)=CM(3,1,T)+RCM(INEPH,2,13,RCHOP(INEPH,2)+1,T)
	IMPM(1,T)=IMPM(1,T)+RCM(INEPH,2,15,RCHOP(INEPH,2)+1,T)
	CALL SDHLNEWT(COUNT,2)
	CALL ARCHIVE(0,INEPH,3)
	CALL ARCHIVE(1,INEPH,6)
	CALL ARCHIVE(2,INEPH,3)
C
	CALL AHLMNEWT(COUNT,2)
	CALL ARCHIVE(0,INEPH,6)
	CALL ARCHIVE(1,INEPH,7)
	CALL ARCHIVE(2,INEPH,6)
C
	CALL AHLCNEWT(COUNT,2)
	CALL ARCHIVE(0,INEPH,7)
	CALL ARCHIVE(2,INEPH,7)
C
	GO TO 180
C
C
  401   SOLS=15
	CALL ARCHIVE(1,INEPH,1)
	DIST= -0.5*TL
	X= 1 - CHOP/2
	DO 411 LL=1,3
	DIST=DIST + TL*0.5
	X= X + CHOP/2
	IF(LL.EQ.1) CALL SFPCTRESA
	CALL SFPCTRESB
	CALL SFPCTRESC
  411   CALL SFPCTRESF
	CALL SFPCTRESD
	CALL SFPCTORQUE(3)
C
	CALL ARCHIVE(1,INEPH,2)
	DIST= DIST - 0.5*TL
	X= 1 - CHOP/2
	DO 412 LL=1,3
	DIST=DIST + TL*0.5
	X=X + CHOP/2
	IF(LL.EQ.1) CALL SFPSTRESA
	CALL SFPSTRESB
	CALL SFPSTRESC
  412   CALL SFPSTRESF
	CALL SFPSTRESD
C
	SOLS = 12
	CALL ARCHIVE(1,INEPH,3)
	DIST= DIST - 0.5*TL
	X= 1 - CHOP/2
	DO 413 LL=1,3
	DIST=DIST + TL*0.5
	X=X + CHOP/2
	IF(LL.EQ.1) CALL SDHLRESA
	CALL SDHLRESB
  413   CALL SDHLRESC
	CALL SDHLRESF
	CALL SDHLRESD
C
	CALL ARCHIVE(1,INEPH,6)
	DIST= DIST - 0.5*TL
	X= 1 - CHOP/2
	DO 414 LL=1,3
	DIST=DIST + TL*0.5
	X=X + CHOP/2
	IF(LL.EQ.1) CALL AHLMRESA
	CALL AHLMRESB
  414   CALL AHLMRESC
	CALL AHLMRESF
	CALL AHLMRESD
C
	CALL ARCHIVE(1,INEPH,7)
	DIST= DIST - 0.5*TL
	X= 1 - CHOP/2
	DO 415 LL=1,3
	DIST=DIST + TL*0.5
	X=X + CHOP/2
	IF(LL.EQ.1) CALL AHLCRESA
	CALL AHLCRESB
  415   CALL AHLCRESC
	WRITE (200,416) 
     1  6.D7*RFVM(INEPH,1,1,1), 6.D7*RFVM(INEPH,2,1,1), 
     1  6.D7*RFVM(INEPH,7,CHOP+1,1),
     1  RPM(INEPH,1,1,1),RPM(INEPH,7,CHOP+1,1),
     1  1.D3*RCM(INEPH,7,3,CHOP+1,1), 1.D3*RCI(INEPH,7,1,3,CHOP+1,1),
     1  6.D7*(RFVM(INEPH,1,1,1)-FVM0),
     1  1.D0 - RFVM(INEPH,2,1,1)/RFVM(INEPH,1,1,1)
        ICHOP2=RCHOP(INEPH,2)
        WRITE (201,416)
     1  1.D3*RCM(INEPH,1,15,1,1), 6.D7*RFVM(INEPH,1,1,1), 
     1  6.D7*RFKM(INEPH,1,15,1,1), 6.D7*RFKM(INEPH,2,15,ICHOP2+1,1),
     1  6.D7*RFKM(INEPH,1,15,1,1)-6.D7*RFKM(INEPH,2,15,ICHOP2+1,1),
     1  1.D3*RCM(INEPH,7,3,CHOP+1,1), 6.D7*RFKM(INEPH,7,1,CHOP+1,1)
  416   FORMAT(8D16.8)
C
	CALL AHLCRESF
	CALL AHLCRESD
C
	IF (TAU.EQ.0) THEN
C  THUS IN THE STEADY STATE CASE WE ARE DONE.
C
	PRINT 160, COUNT
  160   FORMAT (' PROBLEM ',I2,' SOLVED FOR THE STEADY STATE')
	ELSE 
	PRINT 165
  165   FORMAT (' WE ARE NOT DOING TRANSIENT PROBLEMS')
	ENDIF
C
  190   CONTINUE
	STOP
C
C
C JUXTAMEDULLARY NEPHRON
  200   CONTINUE
	PRINT 227
  227   FORMAT(' NUMBER OF EXPERIMENTS = ',$)
	READ *, EXP
	TGGAM(1) = 1.1
	TGDGAM(1) = 0.01
	TGDGAM(2) = 0.1
	DO 290 COUNT=1,EXP
C
C TG FEEDBACK SETTINGS:
	READ(13,8) TGEPSI,AFVM0,DFVM0,MDCL,DMDCL,DNR
C
	TAU=0
	T=0
	TIME=0.D0
  240   T=T+1
C
	SOLS=15
	CALL JMPCTNEWT(COUNT,0)
C
	FVM0 = FVM(1,1)
	AFVM = AFVM0*FVM0
	DFVM = DFVM0*FVM0
	TGGAM(2) = PM(1,1)
C
	CALL ARCHIVE(0,INEPH,1)
	CALL ARCHIVE(2,INEPH,1)
C
	CALL JMPSTNEWT(COUNT,0)
	CALL ARCHIVE(0,INEPH,2)
	CALL ARCHIVE(2,INEPH,2)
C
C At end-PT HCO2- gets added to Cl- and glucose gets added to IMPM
C
	SOLS=12
	CM(3,1,T)=CM(3,1,T)+CM(13,CHOP+1,T)
	IMPM(1,T)=IMPM(1,T)+CM(15,CHOP+1,T)
	CALL LDHLUNEWT(COUNT,0)
	CALL ARCHIVE(0,INEPH,3)
	CALL ARCHIVE(2,INEPH,3)
C
	CALL LDHLLNEWT(COUNT,INEPH,0)
	CALL ARCHIVE(0,INEPH,4)
	CALL ARCHIVE(2,INEPH,4)
C
C SET THE PERITUBULAR CONDITIONS BASED ON THE LDHLL CONDITIONS
        CHOP=RCHOP(INEPH,4)
        DO 35 IX=1,CHOP+1
	VS(IX,T) = RVS(INEPH,4,CHOP+2-IX,T)
	PS(IX,T) = RPS(INEPH,4,CHOP+2-IX,T)
	IMPS(IX,T) = RIMPS(INEPH,4,CHOP+2-IX,T)
	LCHS(IX) = RLCHS(INEPH,4,CHOP+2-IX)
	DO 34 ISOL = 1,SOLS
   34   CS(ISOL,IX,T) = RCS(INEPH,4,ISOL,CHOP+2-IX,T)
   35   CONTINUE
C
	CALL TAHLNEWT(COUNT,INEPH,0)
	CALL ARCHIVE(0,INEPH,5)
	CALL ARCHIVE(2,INEPH,5)
C
	CALL AHLMNEWT(COUNT,0)
	CALL ARCHIVE(0,INEPH,6)
	CALL ARCHIVE(2,INEPH,6)
C
	CALL AHLCNEWT(COUNT,0)
	CALL ARCHIVE(0,INEPH,7)
	CALL ARCHIVE(2,INEPH,7)
C
C INSERT THE TGF ITERATIONS HERE
C  CALLS TO THE *NEWT PROGRAMS SHOULD NOT REREAD PARAMETERS OR BOUNDARY DATA
C
  270   ITER=0
  280   ITER=ITER+1
	PRINT 282, ITER
  282   FORMAT(16X,'TGF ITER=',I5,$)
	TGPHI(1) = RFVM(INEPH,1,1,1) - AFVM -
     1     (DFVM / DMDCL) * (MDCL - RCI(INEPH,7,1,3,CHOP+1,1))
	TGPHI(2) = 
     1     1.D-7*(RPM(INEPH,7,CHOP+1,1) - DNR*RFVM(INEPH,7,CHOP+1,1))
	PRINT 284, (TGGAM(K),K=1,2), (TGPHI(K),K=1,2)
  284   FORMAT (8X,'TGGAM =',3X,2D12.4,8X,'TGPHI=',3X,2D12.4)
	IF((DABS(TGPHI(1)).LT.TGEPSI).AND.(DABS(TGPHI(2)).LT.TGEPSI)) 
     1     GO TO 430
C
C THE PHI ARE TOO LARGE.
C
	DO 288 II=1,2
	TGGAM(II) = TGGAM(II) + TGDGAM(II)
	SOLS=15
	CALL ARCHIVE(1,INEPH,1)
	FVM(1,1) = TGGAM(1)*FVM0
	PM(1,1) = TGGAM(2)
	CALL JMPCTNEWT(COUNT,2)
	CALL ARCHIVE(0,INEPH,1)
	CALL ARCHIVE(1,INEPH,2)
	CALL ARCHIVE(2,INEPH,1)
C
	CALL JMPSTNEWT(COUNT,2)
	CALL ARCHIVE(0,INEPH,2)
	CALL ARCHIVE(1,INEPH,3)
	CALL ARCHIVE(2,INEPH,2)
C
C At end-PT HCO2- gets added to Cl- and glucose gets added to IMPM
C
	SOLS=12
	CM(3,1,T)=CM(3,1,T)+RCM(INEPH,2,13,RCHOP(INEPH,2)+1,T)
	IMPM(1,T)=IMPM(1,T)+RCM(INEPH,2,15,RCHOP(INEPH,2)+1,T)
	CALL LDHLUNEWT(COUNT,2)
	CALL ARCHIVE(0,INEPH,3)
	CALL ARCHIVE(1,INEPH,4)
	CALL ARCHIVE(2,INEPH,3)
C
	CALL LDHLLNEWT(COUNT,INEPH,2)
	CALL ARCHIVE(0,INEPH,4)
	CALL ARCHIVE(1,INEPH,5)
	CALL ARCHIVE(2,INEPH,4)
C
	CALL TAHLNEWT(COUNT,INEPH,2)
	CALL ARCHIVE(0,INEPH,5)
	CALL ARCHIVE(1,INEPH,6)
	CALL ARCHIVE(2,INEPH,5)
C
	CALL AHLMNEWT(COUNT,2)
	CALL ARCHIVE(0,INEPH,6)
	CALL ARCHIVE(1,INEPH,7)
	CALL ARCHIVE(2,INEPH,6)
C
	CALL AHLCNEWT(COUNT,2)
	CALL ARCHIVE(0,INEPH,7)
	CALL ARCHIVE(2,INEPH,7)
C
	TGPPHI(1) = RFVM(INEPH,1,1,1) - AFVM - 
     1     (DFVM / DMDCL) * (MDCL - RCI(INEPH,7,1,3,CHOP+1,1))
	TGPPHI(2) = 
     1     1.D-7*(RPM(INEPH,7,CHOP+1,1) - DNR*RFVM(INEPH,7,CHOP+1,1))
C
	TGJAC(1,II) = (TGPPHI(1) - TGPHI(1))/TGDGAM(II)
	TGJAC(2,II) = (TGPPHI(2) - TGPHI(2))/TGDGAM(II)
	TGGAM(II) = TGGAM(II) - TGDGAM(II)
	FVM(1,1) = TGGAM(1)*FVM0
	PM(1,1) = TGGAM(2)
C
  288   CONTINUE
C
	TGDETJ = TGJAC(1,1)*TGJAC(2,2) - TGJAC(1,2)*TGJAC(2,1)
	IF (DABS(TGDETJ).LT.1.D-17) THEN 
	PRINT 289, TGDETJ,((TGJAC(I,J),I=1,2),J=1,2)
  289   FORMAT ('SINGULAR MATRIX: DET= ' D12.4,4X,'TGJAC= ', 4D12.4)
	STOP
	ELSE
	TGJACI(1,1) = TGJAC(2,2)/TGDETJ
	TGJACI(1,2) = -TGJAC(1,2)/TGDETJ
	TGJACI(2,1) = -TGJAC(2,1)/TGDETJ
	TGJACI(2,2) = TGJAC(1,1)/TGDETJ
	ENDIF
C
	TGDELG(1) = TGJACI(1,1)*TGPHI(1) + TGJACI(1,2)*TGPHI(2)
	TGDELG(2) = TGJACI(2,1)*TGPHI(1) + TGJACI(2,2)*TGPHI(2)
C
	TGGAM(1) = TGGAM(1) - TGDELG(1)
	TGGAM(2) = TGGAM(2) - TGDELG(2)
C
	SOLS=15
	CALL ARCHIVE(1,INEPH,1)
	FVM(1,1) = TGGAM(1)*FVM0
	PM(1,1) = TGGAM(2)
	CALL JMPCTNEWT(COUNT,2)
	CALL ARCHIVE(0,INEPH,1)
	CALL ARCHIVE(1,INEPH,2)
	CALL ARCHIVE(2,INEPH,1)
C
	CALL JMPSTNEWT(COUNT,2)
	CALL ARCHIVE(0,INEPH,2)
	CALL ARCHIVE(1,INEPH,3)
	CALL ARCHIVE(2,INEPH,2)
C
C At end-PT HCO2- gets added to Cl- and glucose gets added to IMPM
C
	SOLS=12
	CM(3,1,T)=CM(3,1,T)+RCM(INEPH,2,13,RCHOP(INEPH,2)+1,T)
	IMPM(1,T)=IMPM(1,T)+RCM(INEPH,2,15,RCHOP(INEPH,2)+1,T)
	CALL LDHLUNEWT(COUNT,2)
	CALL ARCHIVE(0,INEPH,3)
	CALL ARCHIVE(1,INEPH,4)
	CALL ARCHIVE(2,INEPH,3)
C
	CALL LDHLLNEWT(COUNT,INEPH,2)
	CALL ARCHIVE(0,INEPH,4)
	CALL ARCHIVE(1,INEPH,5)
	CALL ARCHIVE(2,INEPH,4)
C
	CALL TAHLNEWT(COUNT,INEPH,2)
	CALL ARCHIVE(0,INEPH,5)
	CALL ARCHIVE(1,INEPH,6)
	CALL ARCHIVE(2,INEPH,5)
C
	CALL AHLMNEWT(COUNT,2)
	CALL ARCHIVE(0,INEPH,6)
	CALL ARCHIVE(1,INEPH,7)
	CALL ARCHIVE(2,INEPH,6)
C
	CALL AHLCNEWT(COUNT,2)
	CALL ARCHIVE(0,INEPH,7)
	CALL ARCHIVE(2,INEPH,7)
C
	GO TO 280
C
  430   SOLS=15
	CALL ARCHIVE(1,INEPH,1)
	DIST= -0.5*TL
	X= 1 - CHOP/2
	DO 431 LL=1,3
	DIST=DIST + TL*0.5
	X= X + CHOP/2
	IF(LL.EQ.1) CALL JMPCTRESA
	CALL JMPCTRESB
	CALL JMPCTRESC
  431   CALL JMPCTRESF
	CALL JMPCTRESD
	CALL JMPCTORQUE(3)
C
	CALL ARCHIVE(1,INEPH,2)
	DIST= DIST - 0.5*TL
	X= 1 - CHOP/2
	DO 432 LL=1,3
	DIST=DIST + TL*0.5
	X=X + CHOP/2
	IF(LL.EQ.1) CALL JMPSTRESA
	CALL JMPSTRESB
	CALL JMPSTRESC
  432   CALL JMPSTRESF
	CALL JMPSTRESD
C
	SOLS = 12
	CALL ARCHIVE(1,INEPH,3)
	DIST= DIST - 0.5*TL
	X= 1 - CHOP/2
	DO 433 LL=1,3
	DIST=DIST + TL*0.5
	X=X + CHOP/2
	IF(LL.EQ.1) CALL LDHLURESA
	CALL LDHLURESB
  433   CALL LDHLURESC
	CALL LDHLURESF
	CALL LDHLURESD
C
	SOLS = 12
	CALL ARCHIVE(1,INEPH,4)
	DIST= DIST - 0.5*TL
	X= 1 - CHOP/2
	DO 434 LL=1,3
	DIST=DIST + TL*0.5
	X=X + CHOP/2
	IF(LL.EQ.1) CALL LDHLLRESA
	CALL LDHLLRESB
  434   CALL LDHLLRESC
	CALL LDHLLRESF
	CALL LDHLLRESD
C
	SOLS = 12
	CALL ARCHIVE(1,INEPH,5)
	DIST= DIST - 0.5*TL
	X= 1 - CHOP/2
	DO 435 LL=1,3
	DIST=DIST + TL*0.5
	X=X + CHOP/2
	IF(LL.EQ.1) CALL TAHLRESA
	CALL TAHLRESB
  435   CALL TAHLRESC
	CALL TAHLRESF
	CALL TAHLRESD
C
	CALL ARCHIVE(1,INEPH,6)
	DIST= DIST - 0.5*TL
	X= 1 - CHOP/2
	DO 436 LL=1,3
	DIST=DIST + TL*0.5
	X=X + CHOP/2
	IF(LL.EQ.1) CALL AHLMRESA
	CALL AHLMRESB
  436   CALL AHLMRESC
	CALL AHLMRESF
	CALL AHLMRESD
C
	CALL ARCHIVE(1,INEPH,7)
	DIST= DIST - 0.5*TL
	X= 1 - CHOP/2
	DO 437 LL=1,3
	DIST=DIST + TL*0.5
	X=X + CHOP/2
	IF(LL.EQ.1) CALL AHLCRESA
	CALL AHLCRESB
  437   CALL AHLCRESC
	WRITE (200,416) 
     1  6.D7*RFVM(INEPH,1,1,1), 6.D7*RFVM(INEPH,2,1,1), 
     1  6.D7*RFVM(INEPH,7,CHOP+1,1),
     1  RPM(INEPH,1,1,1),RPM(INEPH,7,CHOP+1,1),
     1  1.D3*RCM(INEPH,7,3,CHOP+1,1), 1.D3*RCI(INEPH,7,1,3,CHOP+1,1),
     1  6.D7*(RFVM(INEPH,1,1,1)-FVM0),
     1  1.D0 - RFVM(INEPH,2,1,1)/RFVM(INEPH,1,1,1)
        ICHOP2=RCHOP(INEPH,2)
        WRITE (201,416)
     1  1.D3*RCM(INEPH,1,15,1,1), 6.D7*RFVM(INEPH,1,1,1), 
     1  6.D7*RFKM(INEPH,1,15,1,1), 6.D7*RFKM(INEPH,2,15,ICHOP2+1,1),
     1  6.D7*RFKM(INEPH,1,15,1,1)-6.D7*RFKM(INEPH,2,15,ICHOP2+1,1),
     1  1.D3*RCM(INEPH,7,3,CHOP+1,1), 6.D7*RFKM(INEPH,7,1,CHOP+1,1)
	CALL AHLCRESF
	CALL AHLCRESD
C
C
	IF (TAU.EQ.0) THEN
C  THUS IN THE STEADY STATE CASE WE ARE DONE.
	PRINT 260, COUNT
  260   FORMAT (' PROBLEM ',I2,' SOLVED FOR THE STEADY STATE')
	ELSE 
	PRINT 265
  265   FORMAT (' WE ARE NOT DOING TRANSIENT PROBLEMS')
	ENDIF
C
  290   CONTINUE
	STOP
	END
C
